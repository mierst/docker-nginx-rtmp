daemon off;

worker_processes 1;
rtmp_auto_push on;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen 1935;
        chunk_size 8192;

        application stream {
		live on;

		exec ffmpeg -i rtmp://localhost:1935/stream/$name
		#-c:a copy -c:v libx264 -b:v 6000k -bufsize 6000k -maxrate 6000k -f flv -r 60 -s 1920x1080 -tune zerolatency -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_1080p6128kbs
		-c:a copy -c:v libx264 -b:v 4000k -bufsize 4000k -maxrate 4000k -f flv -r 60 -s 1600x900 -tune zerolatency -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_900p4128kbs
		-c:a copy -c:v libx264 -b:v 1000k -bufsize 1000k -maxrate 1000k -f flv -r 60 -s 854x480 -tune zerolatency -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_480p1128kbs;

		record all;
		record_path /tmp/rec;
		record_suffix -%d-%b-%y-%T.flv;
		#record_unique on;
		#record_interval 30s;
		#record_notify on;
		#exec_record_done ffmpeg -i $path -c copy /opt/data/videos/$name.mp4;


        }

        application hls {
            live on;
            hls on;
            hls_fragment_naming system;
            #hls_type live;
            hls_fragment 6s;
            hls_playlist_length 24s;
            hls_path /opt/data/hls;
            hls_nested on;
            hls_cleanup on;

            #hls_variant _1080p6128kbs BANDWIDTH=6128000,RESOLUTION=1920x1080;
            hls_variant _900p4128kbs BANDWIDTH=4128000,RESOLUTION=1600x900;
            hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
        }

	application restream {
		live on;
		#exec ffmpeg -i rtmp://localhost:1935/restream/$name;

		# for twitch I'm being more specific so I can define how my stream looks on twitch
		exec ffmpeg -i rtmp://localhost:1935/restream/$name -c:v libx264 -preset veryfast -c:a copy
		      -b:v 6000k
		      -bufsize 6000k
		      -maxrate 6000k
		      -s 1920x1080 -r 60
		      -f flv rtmp://localhost/twitch/$name;

		# mixer
		push rtmp://ingest-wdc.mixer.com:1935/beam/<MIXER>;
	}

	application twitch {
		live on;
		record off;
		allow publish 127.0.0.1;
		deny publish all;
		
		# twitch.tv/<channel>
		push rtmp://live-jfk.twitch.tv/app/<TWITCH>;

	}

	application vod {
	    play /ops/data/videos;
	}

	application vod2 {
	    play /tmp/rec;
	}
    }
}

http {
    access_log /dev/stdout combined;

    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    server {
        listen 80;

        # Uncomment these lines to enable SSL.
        # Update the ssl paths with your own certificate and private key.
        # listen 443 ssl;
        # ssl_certificate     /opt/certs/example.com.crt;
        # ssl_certificate_key /opt/certs/example.com.key;

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /opt/data;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

        location /live {
          alias /opt/data/hls;
          types {
              application/vnd.apple.mpegurl m3u8;
              video/mp2t ts;
          }
          add_header Cache-Control no-cache;
          add_header Access-Control-Allow-Origin *;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }

        location /static {
            alias /www/static;
        }

        location = /crossdomain.xml {
            root /www/static;
            default_type text/xml;
            expires 24h;
        }
    }
}
